# -*- coding: utf-8 -*-
"""national_ag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cs_4aMRBrLMcCTsEZwbRHcfzC-Pm0pxX

Load the CSV file
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/national_ag_prod.csv')
df

"""Evaluate the Dataset"""

df.head(24)

"""Analyse the rows and columns I have"""

df.tail(12)

"""Check fo errors in dataset for possible cleaning

> Check for null or NAN values in dataset


"""

df.isnull().sum()

"""No Null or NAN value found i.e data is clean

Proceed to getting a breakdown of dataset
"""

df.describe()

"""Check correlation of columns

"""

# First calculate the correlation matrix
corr=df.corr(method='pearson', min_periods=1, numeric_only=bool)
import seaborn as sns
import matplotlib.pyplot as plt
# Create the heatmap
sns.heatmap(corr, annot=True)
plt.show()

"""#Background Information Dataset
---

###Note:
TFP growth is the difference between growth of aggregate output and growth of all inputs used

TFP, therefore, measures changes in the efficiency with which inputs are transformed into outputs

##Long-Term Drivers of Agricultural Productivity Growth:
  - Innovations in on-farm tasks

  - Changes in the organization and structure of the farm sector

  - Research aimed at improving farm production

  - Adjustments for quality improvements in inputs (e.g., more effective chemicals, better-skilled workforce)

##Short-Term Influences on Measured Productivity:
  - Random events such as weather conditions

**Goal**
Identify which input category (Capital, Labor, or Intermediate Inputs) has the strongest statistical relationship (positive or negative) with:

*   Total agricultural output
*   Total factor productivity (TFP)

#STEP 1: Group and Aggregate by Input Categories
   Break the data into input categories:

* Capital Inputs: All attributes under "Capital inputs"

* Labor Inputs: Attributes under "Labor inputs"

* Intermediate Inputs: Attributes under "Intermediate inputs"

Sum each category per year to get:

----


Capital_total, Labor_total, Intermediate_total
"""



capital_inputs_df = df[df['Attribute'].str.contains('Capital inputs')]
labor_inputs_df = df[df['Attribute'].str.contains('Labor inputs')]
intermediate_inputs_df = df[df['Attribute'].str.contains('Intermediate inputs')]

print("Capital Inputs:")
display(capital_inputs_df.head())

print("\nLabor Inputs:")
display(labor_inputs_df.head())

print("\nIntermediate Inputs:")
display(intermediate_inputs_df.head())

capital_total_per_year = capital_inputs_df.groupby('Year')['Value'].sum().reset_index()
labor_total_per_year = labor_inputs_df.groupby('Year')['Value'].sum().reset_index()
intermediate_total_per_year = intermediate_inputs_df.groupby('Year')['Value'].sum().reset_index()

print("Capital Total per Year:")
display(capital_total_per_year.head())

print("\nLabor Total per Year:")
display(labor_total_per_year.head())

print("\nIntermediate Total per Year:")
display(intermediate_total_per_year.head())

"""2. Prepare Your Dataset
For each year, your dataset should have :

Year | Total Output | TFP | Capital_total | Labor_total | Intermediate_total
"""



# Extract 'Total agricultural output' and 'Total factor productivity (TFP)'
total_output_df = df[df['Attribute'] == 'Total agricultural output'].rename(columns={'Value': 'Total Output'})
tfp_df = df[df['Attribute'] == 'Total factor productivity (TFP)'].rename(columns={'Value': 'TFP'})

# Filter for subcomponents of each input category
capital_subcomponents_df = df[df['Attribute'].str.contains('Capital inputs:') & ~df['Attribute'].str.contains('Capital inputs: Total')]
labor_subcomponents_df = df[df['Attribute'].str.contains('Labor inputs:') & ~df['Attribute'].str.contains('Labor inputs: Total')]
intermediate_subcomponents_df = df[df['Attribute'].str.contains('Intermediate inputs:') & ~df['Attribute'].str.contains('Intermediate inputs: Total')]

# Pivot the subcomponent dataframes to have years as index and attributes as columns
capital_subcomponents_pivot = capital_subcomponents_df.pivot(index='Year', columns='Attribute', values='Value').reset_index()
labor_subcomponents_pivot = labor_subcomponents_df.pivot(index='Year', columns='Attribute', values='Value').reset_index()
intermediate_subcomponents_pivot = intermediate_subcomponents_df.pivot(index='Year', columns='Attribute', values='Value').reset_index()


# Merge the dataframes
merged_df = total_output_df[['Year', 'Total Output']].merge(
    tfp_df[['Year', 'TFP']], on='Year', how='inner'
).merge(
    capital_total_per_year.rename(columns={'Value': 'Capital_total'}), on='Year', how='inner'
).merge(
    labor_total_per_year.rename(columns={'Value': 'Labor_total'}), on='Year', how='inner'
).merge(
    intermediate_total_per_year.rename(columns={'Value': 'Intermediate_total'}), on='Year', how='inner'
).merge(
    capital_subcomponents_pivot, on='Year', how='inner'
).merge(
    labor_subcomponents_pivot, on='Year', how='inner'
).merge(
    intermediate_subcomponents_pivot, on='Year', how='inner'
)


# Display the resulting DataFrame
display(merged_df.head())

"""# **Correlation Analysis**
Use Pearson correlation to see linear relationships:

Correlate Total agricultural output and TFP with each of the 3 inputs: Capital_total	Labor_total	Intermediate_total
"""



"""### **Run Correlation Analysis for Capital_total Labor_total Intermediate_total**

## HeatMap
"""

import pandas as pd
import matplotlib.pyplot as plt
# Combine the two correlation series into a single DataFrame for the heatmap
correlation_combined = pd.DataFrame({
    'Total Output': correlation_output,
    'TFP': correlation_tfp
})

# Create the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_combined, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation of Inputs with Total Output and TFP')
plt.xlabel('Metric')
plt.ylabel('Input Category')
plt.show()

"""# Findings:
---

**Intermediate Input** has the hightest correlation value with the TFP and Total Output.

Next, I have to run more analysis to figure out which category of the Intermediate Input specifically has the strongest influence on the the Total Output and Total Factor Productivity(TFP)

### **Run Correlation Analysis for all the input **
"""

correlation_output = merged_df[[
    "Total Output",
    "Capital inputs: Durable equipment",
    "Capital inputs: Inventories",
    "Capital inputs: Land",
    "Capital inputs: Service buildings",
    "Labor inputs: Hired labor",
    "Labor inputs: Self-employed and unpaid family workers",
    "Intermediate inputs: Energy",
    "Intermediate inputs: Feed and seed",
    "Intermediate inputs: Fertilizer and lime",
    "Intermediate inputs: Other intermediate inputs",
    "Intermediate inputs: Pesticides",
    "Intermediate inputs: Purchased services"
]].corr(method='pearson')['Total Output'].drop('Total Output')

correlation_tfp = merged_df[[
    "TFP",
    "Capital inputs: Durable equipment",
    "Capital inputs: Inventories",
    "Capital inputs: Land",
    "Capital inputs: Service buildings",
    "Labor inputs: Hired labor",
    "Labor inputs: Self-employed and unpaid family workers",
    "Intermediate inputs: Energy",
    "Intermediate inputs: Feed and seed",
    "Intermediate inputs: Fertilizer and lime",
    "Intermediate inputs: Other intermediate inputs",
    "Intermediate inputs: Pesticides",
    "Intermediate inputs: Purchased services"
]].corr(method='pearson')['TFP'].drop('TFP')

print("Correlation with Total agricultural output:")
display(correlation_output)

print("\nCorrelation with Total factor productivity (TFP):")
display(correlation_tfp)

"""## HeatMap"""

import pandas as pd
import matplotlib.pyplot as plt
# Combine the two correlation series into a single DataFrame for the heatmap
correlation_combined_all_inputs = pd.DataFrame({
    'Total Output': correlation_output,
    'TFP': correlation_tfp
})

# Create the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_combined_all_inputs, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation of Individual Inputs with Total Output and TFP')
plt.xlabel('Metric')
plt.ylabel('Input Category')
plt.tight_layout() # Adjust layout to prevent labels overlapping
plt.show()

import matplotlib.pyplot as plt
# Filter the combined correlation dataframe to include only intermediate inputs
intermediate_input_attributes = [
    "Intermediate inputs: Energy",
    "Intermediate inputs: Feed and seed",
    "Intermediate inputs: Fertilizer and lime",
    "Intermediate inputs: Other intermediate inputs",
    "Intermediate inputs: Pesticides",
    "Intermediate inputs: Purchased services"
]

correlation_intermediate_inputs = correlation_combined_all_inputs.loc[intermediate_input_attributes]

# Create the heatmap for intermediate inputs only
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_intermediate_inputs, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation of Intermediate Inputs with Total Output and TFP')
plt.xlabel('Metric')
plt.ylabel('Intermediate Input Category')
plt.tight_layout() # Adjust layout to prevent labels overlapping
plt.show()

"""# Final Findings:
---

**Intermediate Input: Purchased Services** has the hightest correlation value with the TFP and Total Output.

i.e *Intermediate Input: Purchased Services* has the strongest influence on both the Total Output and Total Factor Productivity(TFP)

### "Over the 1948 to 2021 period, labor and land inputs declined by 76 and 28 percent, respectively, while intermediate inputs grew by 109 percent."



Extracted from: https://www.ers.usda.gov/data-products/agricultural-productivity-in-the-united-states/productivity-growth-in-us-agriculture

I suspect the Intermediate Input: Purchased Services grew or increased more over the years more that's why it had the greatest correlation with the Total Output and Total Factor Productivity(TFP)
"""

import matplotlib.pyplot as plt
# Prepare data for plotting intermediate input subcomponents
intermediate_input_trend_df = merged_df[['Year'] + intermediate_input_attributes]

# Melt the DataFrame to long format for easier plotting with seaborn
intermediate_input_trend_melted = intermediate_input_trend_df.melt(
    id_vars=['Year'],
    value_vars=intermediate_input_attributes,
    var_name='Intermediate Input Type',
    value_name='Value'
)

# Plot the trend lines
plt.figure(figsize=(12, 8))
sns.lineplot(data=intermediate_input_trend_melted, x='Year', y='Value', hue='Intermediate Input Type')
plt.title('Trend of Intermediate Input Types Over Years')
plt.xlabel('Year')
plt.ylabel('Value')
plt.grid(True)
plt.legend(title='Intermediate Input Type', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""While "Intermediate inputs: Purchased services" had a positive CAGR of 1.08%, it was not the highest.

**Pesticides** had the highest CAGR at 5.89%, and **Other intermediate inputs** followed at 1.64%.

This suggests that growth alone doesn't explain Purchased services’ strong correlation with Total Output and TFP. Factors like:

* consistent year-to-year growth,

* its functional importance in the production process, and

* interactions with other inputs

may better account for its impact.


*The line plot supports this: Purchased services shows steady growth over time, while Pesticides rises more sharply in later years—resulting in a higher CAGR but weaker correlation.*








"""